<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Satƒ±n Alma Faturalarƒ± Mod√ºl√º Test</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
        }

        .header p {
            opacity: 0.9;
            font-size: 1.1em;
        }

        .content {
            padding: 30px;
        }

        .section {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 25px;
            margin-bottom: 25px;
            border-left: 5px solid #3498db;
        }

        .section h2 {
            color: #2c3e50;
            margin-bottom: 20px;
            font-size: 1.5em;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .form-group {
            margin-bottom: 15px;
        }

        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 600;
            color: #34495e;
        }

        input, textarea, select {
            width: 100%;
            padding: 12px;
            border: 2px solid #e1e8ed;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }

        input:focus, textarea:focus, select:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
        }

        .btn {
            background: #3498db;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
            margin-right: 10px;
            margin-bottom: 10px;
        }

        .btn:hover {
            background: #2980b9;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(52, 152, 219, 0.3);
        }

        .btn-success {
            background: #27ae60;
        }

        .btn-success:hover {
            background: #229954;
            box-shadow: 0 5px 15px rgba(39, 174, 96, 0.3);
        }

        .btn-secondary {
            background: #95a5a6;
        }

        .btn-secondary:hover {
            background: #7f8c8d;
            box-shadow: 0 5px 15px rgba(149, 165, 166, 0.3);
        }

        .btn-danger {
            background: #e74c3c;
        }

        .btn-danger:hover {
            background: #c0392b;
            box-shadow: 0 5px 15px rgba(231, 76, 60, 0.3);
        }

        .result {
            background: white;
            border-radius: 8px;
            padding: 20px;
            margin-top: 15px;
            border: 2px solid #e1e8ed;
            font-family: 'Courier New', monospace;
            font-size: 12px;
            max-height: 400px;
            overflow-y: auto;
            white-space: pre-wrap;
        }

        .result.success {
            border-color: #27ae60;
            background: #f8fff9;
        }

        .result.error {
            border-color: #e74c3c;
            background: #fff8f8;
        }

        .status {
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 15px;
            font-weight: 600;
        }

        .status.info {
            background: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }

        .status.success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .status.error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 20px;
        }

        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .nav-links {
            text-align: center;
            margin-bottom: 20px;
        }

        .nav-links a {
            display: inline-block;
            margin: 0 10px;
            padding: 10px 20px;
            background: #3498db;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            transition: background 0.3s ease;
        }

        .nav-links a:hover {
            background: #2980b9;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üè¢ Satƒ±n Alma Faturalarƒ± Mod√ºl√º Test</h1>
            <p>Logo API ile satƒ±n alma faturalarƒ± i≈ülemlerini test edin</p>
        </div>

        <div class="content">
            <div class="nav-links">
                <a href="/purchase-test">Satƒ±n Alma Sipari≈üleri</a>
                <a href="/sales-invoice-test">Satƒ±≈ü Faturalarƒ±</a>
                <a href="/api-test">API Test</a>
            </div>

            <!-- Token Alma -->
            <div class="section">
                <h2>üîê Token Alma</h2>
                <div class="grid">
                    <div>
                        <label for="clientId">Kullanƒ±cƒ± Adƒ±:</label>
                        <input type="text" id="clientId" value="dummy_data" placeholder="Kullanƒ±cƒ± adƒ±">
                    </div>
                    <div>
                        <label for="clientSecret">≈ûifre:</label>
                        <input type="password" id="clientSecret" value="dummy_data" placeholder="≈ûifre">
                    </div>
                </div>
                <button class="btn" onclick="getToken()">Token Al</button>
                <div id="tokenResult" class="result"></div>
            </div>

            <!-- Satƒ±n Alma Faturalarƒ± -->
            <div class="section">
                <h2>üìÑ Satƒ±n Alma Faturalarƒ±</h2>
                <div class="grid">
                    <div>
                        <label for="invoiceOffset">Offset:</label>
                        <input type="number" id="invoiceOffset" value="0" min="0">
                    </div>
                    <div>
                        <label for="invoiceLimit">Limit:</label>
                        <input type="number" id="invoiceLimit" value="10" min="1" max="100">
                    </div>
                </div>
                <button class="btn" onclick="getPurchaseInvoices()">Faturalarƒ± Listele</button>
                <button class="btn btn-secondary" onclick="getPurchaseInvoicesWithSearch()">Arama ile Getir</button>
                <div id="invoicesResult" class="result"></div>
            </div>

            <!-- Tek Fatura ƒ∞≈ülemleri -->
            <div class="section">
                <h2>üìã Tek Fatura ƒ∞≈ülemleri</h2>
                <div class="grid">
                    <div>
                        <label for="invoiceId">Fatura ID:</label>
                        <input type="number" id="invoiceId" value="1" min="1">
                    </div>
                </div>
                <button class="btn" onclick="getPurchaseInvoice()">Faturayƒ± Getir</button>
                <button class="btn btn-success" onclick="getPurchaseInvoiceFull()">Detaylƒ± Getir</button>
                <div id="singleInvoiceResult" class="result"></div>
            </div>

            <!-- Tedarik√ßi ƒ∞≈ülemleri -->
            <div class="section">
                <h2>üë• Tedarik√ßi ƒ∞≈ülemleri</h2>
                <div class="grid">
                    <div>
                        <label for="supplierOffset">Offset:</label>
                        <input type="number" id="supplierOffset" value="0" min="0">
                    </div>
                    <div>
                        <label for="supplierLimit">Limit:</label>
                        <input type="number" id="supplierLimit" value="10" min="1" max="100">
                    </div>
                </div>
                <button class="btn" onclick="getSuppliers()">Tedarik√ßileri Listele</button>
                <button class="btn btn-secondary" onclick="getSupplier()">Tek Tedarik√ßi Getir</button>
                <div id="suppliersResult" class="result"></div>
            </div>

            <!-- Satƒ±n Alma Sipari≈üleri -->
            <div class="section">
                <h2>üì¶ Satƒ±n Alma Sipari≈üleri</h2>
                <div class="grid">
                    <div>
                        <label for="orderOffset">Offset:</label>
                        <input type="number" id="orderOffset" value="0" min="0">
                    </div>
                    <div>
                        <label for="orderLimit">Limit:</label>
                        <input type="number" id="orderLimit" value="10" min="1" max="100">
                    </div>
                </div>
                <button class="btn" onclick="getPurchaseOrders()">Sipari≈üleri Listele</button>
                <button class="btn btn-secondary" onclick="getPurchaseOrder()">Tek Sipari≈ü Getir</button>
                <div id="ordersResult" class="result"></div>
            </div>

            <!-- Genel Data Endpoint -->
            <div class="section">
                <h2>üåê Genel Data Endpoint</h2>
                <div class="grid">
                    <div>
                        <label for="dataEndpoint">Endpoint:</label>
                        <input type="text" id="dataEndpoint" value="purchaseInvoices" placeholder="√ñrn: purchaseInvoices, suppliers, purchaseOrders">
                    </div>
                    <div>
                        <label for="dataId">ID (opsiyonel):</label>
                        <input type="number" id="dataId" placeholder="Tek kayƒ±t i√ßin ID">
                    </div>
                </div>
                <div class="grid">
                    <div>
                        <label for="dataOffset">Offset:</label>
                        <input type="number" id="dataOffset" value="0" min="0">
                    </div>
                    <div>
                        <label for="dataLimit">Limit:</label>
                        <input type="number" id="dataLimit" value="10" min="1" max="100">
                    </div>
                </div>
                <button class="btn" onclick="getData()">Data Getir</button>
                <button class="btn btn-success" onclick="getDataById()">ID ile Getir</button>
                <button class="btn btn-secondary" onclick="getDataByIdFull()">Detaylƒ± Getir</button>
                <div id="dataResult" class="result"></div>
            </div>

            <!-- Fatura Olu≈üturma -->
            <div class="section">
                <h2>‚ûï Fatura Olu≈üturma</h2>
                <div class="form-group">
                    <label for="createInvoiceData">Fatura Data (JSON):</label>
                    <textarea id="createInvoiceData" rows="8" placeholder='{
  "TYPE": 2,
  "NUMBER": "~",
  "DATE": "2024-12-20",
  "ARP_CODE": "320.01.0001",
  "TOTAL_NET": 1000.0,
  "NOTES1": "Test satƒ±n alma faturasƒ±"
}'></textarea>
                </div>
                <button class="btn btn-success" onclick="createPurchaseInvoice()">Fatura Olu≈ütur</button>
                <div id="createInvoiceResult" class="result"></div>
            </div>

            <!-- Token Durumu -->
            <div class="section">
                <h2>üîê Token Durumu</h2>
                <div id="tokenStatus" class="status info">Token durumu kontrol ediliyor...</div>
                <button class="btn btn-danger" onclick="logout()">√áƒ±kƒ±≈ü Yap</button>
            </div>
        </div>
    </div>

    <script>
        let currentToken = localStorage.getItem('authToken');

        // Token alma
        async function getToken() {
            const clientId = document.getElementById('clientId').value;
            const clientSecret = document.getElementById('clientSecret').value;
            
            try {
                const response = await fetch('/auth/token', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ 
                        username: clientId, 
                        password: clientSecret, 
                        firmno: '1' 
                    })
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    currentToken = result.access_token;
                    localStorage.setItem('authToken', currentToken);
                    showResult('tokenResult', result, true);
                    updateTokenStatus();
                } else {
                    showResult('tokenResult', result, false);
                }
            } catch (error) {
                showResult('tokenResult', { error: error.message }, false);
            }
        }

        // Satƒ±n alma faturalarƒ± listesi
        async function getPurchaseInvoices() {
            const offset = document.getElementById('invoiceOffset').value;
            const limit = document.getElementById('invoiceLimit').value;
            
            try {
                const response = await fetch(`/purchase-invoice/invoices?offset=${offset}&limit=${limit}`, {
                    headers: getAuthHeaders()
                });
                
                const result = await response.json();
                showResult('invoicesResult', result, response.ok);
            } catch (error) {
                showResult('invoicesResult', { error: error.message }, false);
            }
        }

        // Arama ile faturalar
        async function getPurchaseInvoicesWithSearch() {
            const offset = document.getElementById('invoiceOffset').value;
            const limit = document.getElementById('invoiceLimit').value;
            
            try {
                const response = await fetch(`/purchase-invoice/invoices?offset=${offset}&limit=${limit}&search=S-`, {
                    headers: getAuthHeaders()
                });
                
                const result = await response.json();
                showResult('invoicesResult', result, response.ok);
            } catch (error) {
                showResult('invoicesResult', { error: error.message }, false);
            }
        }

        // Tek fatura okuma
        async function getPurchaseInvoice() {
            const id = document.getElementById('invoiceId').value;
            
            try {
                const response = await fetch(`/purchase-invoice/invoices/${id}`, {
                    headers: getAuthHeaders()
                });
                
                const result = await response.json();
                showResult('singleInvoiceResult', result, response.ok);
            } catch (error) {
                showResult('singleInvoiceResult', { error: error.message }, false);
            }
        }

        // Detaylƒ± fatura okuma
        async function getPurchaseInvoiceFull() {
            const id = document.getElementById('invoiceId').value;
            
            try {
                const response = await fetch(`/purchase-invoice/invoices/${id}/full`, {
                    headers: getAuthHeaders()
                });
                
                const result = await response.json();
                showResult('singleInvoiceResult', result, response.ok);
            } catch (error) {
                showResult('singleInvoiceResult', { error: error.message }, false);
            }
        }

        // Tedarik√ßi listesi
        async function getSuppliers() {
            const offset = document.getElementById('supplierOffset').value;
            const limit = document.getElementById('supplierLimit').value;
            
            try {
                const response = await fetch(`/purchase-invoice/suppliers?offset=${offset}&limit=${limit}`, {
                    headers: getAuthHeaders()
                });
                
                const result = await response.json();
                showResult('suppliersResult', result, response.ok);
            } catch (error) {
                showResult('suppliersResult', { error: error.message }, false);
            }
        }

        // Tek tedarik√ßi okuma
        async function getSupplier() {
            const id = document.getElementById('invoiceId').value;
            
            try {
                const response = await fetch(`/purchase-invoice/suppliers/${id}`, {
                    headers: getAuthHeaders()
                });
                
                const result = await response.json();
                showResult('suppliersResult', result, response.ok);
            } catch (error) {
                showResult('suppliersResult', { error: error.message }, false);
            }
        }

        // Satƒ±n alma sipari≈üleri listesi
        async function getPurchaseOrders() {
            const offset = document.getElementById('orderOffset').value;
            const limit = document.getElementById('orderLimit').value;
            
            try {
                const response = await fetch(`/purchase-invoice/orders?offset=${offset}&limit=${limit}`, {
                    headers: getAuthHeaders()
                });
                
                const result = await response.json();
                showResult('ordersResult', result, response.ok);
            } catch (error) {
                showResult('ordersResult', { error: error.message }, false);
            }
        }

        // Tek satƒ±n alma sipari≈üi okuma
        async function getPurchaseOrder() {
            const id = document.getElementById('invoiceId').value;
            
            try {
                const response = await fetch(`/purchase-invoice/orders/${id}`, {
                    headers: getAuthHeaders()
                });
                
                const result = await response.json();
                showResult('ordersResult', result, response.ok);
            } catch (error) {
                showResult('ordersResult', { error: error.message }, false);
            }
        }

        // Genel data listesi
        async function getData() {
            const endpoint = document.getElementById('dataEndpoint').value;
            const offset = document.getElementById('dataOffset').value;
            const limit = document.getElementById('dataLimit').value;
            
            try {
                const response = await fetch(`/purchase-invoice/data/${endpoint}?offset=${offset}&limit=${limit}`, {
                    headers: getAuthHeaders()
                });
                
                const result = await response.json();
                showResult('dataResult', result, response.ok);
            } catch (error) {
                showResult('dataResult', { error: error.message }, false);
            }
        }

        // Genel tek data getir
        async function getDataById() {
            const endpoint = document.getElementById('dataEndpoint').value;
            const id = document.getElementById('dataId').value;
            
            if (!id) {
                showResult('dataResult', { error: 'ID gerekli' }, false);
                return;
            }
            
            try {
                const response = await fetch(`/purchase-invoice/data/${endpoint}/${id}`, {
                    headers: getAuthHeaders()
                });
                
                const result = await response.json();
                showResult('dataResult', result, response.ok);
            } catch (error) {
                showResult('dataResult', { error: error.message }, false);
            }
        }

        // Detaylƒ± data getir
        async function getDataByIdFull() {
            const endpoint = document.getElementById('dataEndpoint').value;
            const id = document.getElementById('dataId').value;
            
            if (!id) {
                showResult('dataResult', { error: 'ID gerekli' }, false);
                return;
            }
            
            try {
                const response = await fetch(`/purchase-invoice/data/${endpoint}/${id}/full`, {
                    headers: getAuthHeaders()
                });
                
                const result = await response.json();
                showResult('dataResult', result, response.ok);
            } catch (error) {
                showResult('dataResult', { error: error.message }, false);
            }
        }

        // Fatura olu≈üturma
        async function createPurchaseInvoice() {
            const dataText = document.getElementById('createInvoiceData').value;
            
            try {
                const data = JSON.parse(dataText);
                
                const response = await fetch('/purchase-invoice/invoices', {
                    method: 'POST',
                    headers: {
                        ...getAuthHeaders(),
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                showResult('createInvoiceResult', result, response.ok);
            } catch (error) {
                showResult('createInvoiceResult', { error: error.message }, false);
            }
        }

        // Yardƒ±mcƒ± fonksiyonlar
        function getAuthHeaders() {
            return {
                'Authorization': `Bearer ${currentToken}`
            };
        }

        function showResult(elementId, data, isSuccess) {
            const element = document.getElementById(elementId);
            element.className = `result ${isSuccess ? 'success' : 'error'}`;
            element.innerHTML = `<pre>${JSON.stringify(data, null, 2)}</pre>`;
        }

        function updateTokenStatus() {
            const statusElement = document.getElementById('tokenStatus');
            if (currentToken) {
                statusElement.className = 'status success';
                statusElement.textContent = '‚úÖ Token mevcut';
            } else {
                statusElement.className = 'status error';
                statusElement.textContent = '‚ùå Token yok';
            }
        }

        function logout() {
            currentToken = null;
            localStorage.removeItem('authToken');
            updateTokenStatus();
        }

        // Sayfa y√ºklendiƒüinde token durumunu kontrol et
        document.addEventListener('DOMContentLoaded', function() {
            updateTokenStatus();
        });
    </script>
</body>
</html> 