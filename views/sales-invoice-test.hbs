<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{title}}</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        .header h1 {
            margin: 0;
            font-size: 2.5em;
            font-weight: 300;
        }
        .content {
            padding: 30px;
        }
        .section {
            margin-bottom: 40px;
            padding: 25px;
            border: 1px solid #e1e5e9;
            border-radius: 10px;
            background: #f8f9fa;
        }
        .section h2 {
            color: #495057;
            margin-top: 0;
            border-bottom: 2px solid #667eea;
            padding-bottom: 10px;
        }
        .form-group {
            margin-bottom: 15px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 600;
            color: #495057;
        }
        input, select, textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid #e1e5e9;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s;
            box-sizing: border-box;
        }
        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: #667eea;
        }
        .btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 12px 25px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: transform 0.2s;
            margin-right: 10px;
            margin-bottom: 10px;
        }
        .btn:hover {
            transform: translateY(-2px);
        }
        .btn-secondary {
            background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
        }
        .btn-success {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        }
        .btn-danger {
            background: linear-gradient(135deg, #dc3545 0%, #fd7e14 100%);
        }
        .result {
            margin-top: 20px;
            padding: 20px;
            border-radius: 8px;
            background: #f8f9fa;
            border-left: 4px solid #667eea;
        }
        .result.success {
            background: #d4edda;
            border-left-color: #28a745;
        }
        .result.error {
            background: #f8d7da;
            border-left-color: #dc3545;
        }
        pre {
            background: #2d3748;
            color: #e2e8f0;
            padding: 15px;
            border-radius: 8px;
            overflow-x: auto;
            font-size: 12px;
            line-height: 1.4;
        }
        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }
        .status {
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 15px;
            font-weight: 600;
        }
        .status.success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .status.error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        .status.info {
            background: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üßæ Satƒ±≈ü Faturalarƒ± Mod√ºl√º Test</h1>
            <p>Logo API ile satƒ±≈ü faturalarƒ± i≈ülemleri</p>
        </div>
        
        <div class="content">
            <!-- Token Alma B√∂l√ºm√º -->
            <div class="section">
                <h2>üîë Token Alma</h2>
                <div class="grid">
                    <div>
                        <label for="clientId">Client ID:</label>
                        <input type="text" id="clientId" value="dummy_data" placeholder="Client ID">
                    </div>
                    <div>
                        <label for="clientSecret">Client Secret:</label>
                        <input type="text" id="clientSecret" value="dummy_data" placeholder="Client Secret">
                    </div>
                </div>
                <button class="btn" onclick="getToken()">Token Al</button>
                <div id="tokenResult"></div>
            </div>

            <!-- Satƒ±≈ü Faturalarƒ± Listesi -->
            <div class="section">
                <h2>üìã Satƒ±≈ü Faturalarƒ± Listesi</h2>
                <div class="grid">
                    <div>
                        <label for="invoiceOffset">Offset:</label>
                        <input type="number" id="invoiceOffset" value="0" min="0">
                    </div>
                    <div>
                        <label for="invoiceLimit">Limit:</label>
                        <input type="number" id="invoiceLimit" value="10" min="1" max="100">
                    </div>
                </div>
                <button class="btn" onclick="getSalesInvoices()">Faturalarƒ± Listele</button>
                <button class="btn btn-secondary" onclick="getSalesInvoicesWithSearch()">Arama ile Listele</button>
                <div id="invoicesResult"></div>
            </div>

            <!-- Tek Fatura Okuma -->
            <div class="section">
                <h2>üîç Tek Fatura Okuma</h2>
                <div class="grid">
                    <div>
                        <label for="invoiceId">Fatura ID:</label>
                        <input type="number" id="invoiceId" value="8" min="1">
                    </div>
                </div>
                <button class="btn" onclick="getSalesInvoice()">Faturayƒ± Getir</button>
                <button class="btn btn-success" onclick="getSalesInvoiceFull()">Detaylƒ± Getir</button>
                <div id="singleInvoiceResult"></div>
            </div>

            <!-- M√º≈üteri ƒ∞≈ülemleri -->
            <div class="section">
                <h2>üë• M√º≈üteri ƒ∞≈ülemleri</h2>
                <div class="grid">
                    <div>
                        <label for="customerOffset">Offset:</label>
                        <input type="number" id="customerOffset" value="0" min="0">
                    </div>
                    <div>
                        <label for="customerLimit">Limit:</label>
                        <input type="number" id="customerLimit" value="10" min="1" max="100">
                    </div>
                </div>
                <button class="btn" onclick="getCustomers()">M√º≈üterileri Listele</button>
                <button class="btn btn-secondary" onclick="getCustomer()">Tek M√º≈üteri Getir</button>
                <div id="customersResult"></div>
            </div>

            <!-- Satƒ±≈ü Sipari≈üleri -->
            <div class="section">
                <h2>üì¶ Satƒ±≈ü Sipari≈üleri</h2>
                <div class="grid">
                    <div>
                        <label for="orderOffset">Offset:</label>
                        <input type="number" id="orderOffset" value="0" min="0">
                    </div>
                    <div>
                        <label for="orderLimit">Limit:</label>
                        <input type="number" id="orderLimit" value="10" min="1" max="100">
                    </div>
                </div>
                <button class="btn" onclick="getSalesOrders()">Sipari≈üleri Listele</button>
                <button class="btn btn-secondary" onclick="getSalesOrder()">Tek Sipari≈ü Getir</button>
                <div id="ordersResult"></div>
            </div>

            <!-- Genel Data Endpoint -->
            <div class="section">
                <h2>üåê Genel Data Endpoint</h2>
                <div class="grid">
                    <div>
                        <label for="dataEndpoint">Endpoint:</label>
                        <input type="text" id="dataEndpoint" value="salesInvoices" placeholder="√ñrn: salesInvoices, customers, salesOrders">
                    </div>
                    <div>
                        <label for="dataId">ID (opsiyonel):</label>
                        <input type="number" id="dataId" placeholder="Tek kayƒ±t i√ßin ID">
                    </div>
                </div>
                <div class="grid">
                    <div>
                        <label for="dataOffset">Offset:</label>
                        <input type="number" id="dataOffset" value="0" min="0">
                    </div>
                    <div>
                        <label for="dataLimit">Limit:</label>
                        <input type="number" id="dataLimit" value="10" min="1" max="100">
                    </div>
                </div>
                <button class="btn" onclick="getData()">Data Getir</button>
                <button class="btn btn-success" onclick="getDataById()">ID ile Getir</button>
                <button class="btn btn-secondary" onclick="getDataByIdFull()">Detaylƒ± Getir</button>
                <div id="dataResult"></div>
            </div>

            <!-- Fatura Olu≈üturma -->
            <div class="section">
                <h2>‚ûï Fatura Olu≈üturma</h2>
                <div class="form-group">
                    <label for="createInvoiceData">Fatura Data (JSON):</label>
                    <textarea id="createInvoiceData" rows="8" placeholder='{
  "TYPE": 8,
  "NUMBER": "~",
  "DATE": "2024-12-20",
  "ARP_CODE": "120.01.0001",
  "TOTAL_NET": 1000.0,
  "NOTES1": "Test faturasƒ±"
}'></textarea>
                </div>
                <button class="btn btn-success" onclick="createSalesInvoice()">Fatura Olu≈ütur</button>
                <div id="createInvoiceResult"></div>
            </div>

            <!-- Token Durumu -->
            <div class="section">
                <h2>üîê Token Durumu</h2>
                <div id="tokenStatus" class="status info">Token durumu kontrol ediliyor...</div>
                <button class="btn btn-danger" onclick="logout()">√áƒ±kƒ±≈ü Yap</button>
            </div>
        </div>
    </div>

    <script>
        let currentToken = localStorage.getItem('authToken');

        // Token alma
        async function getToken() {
            const clientId = document.getElementById('clientId').value;
            const clientSecret = document.getElementById('clientSecret').value;
            
            try {
                const response = await fetch('/auth/token', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ 
                        username: clientId, 
                        password: clientSecret, 
                        firmno: '1' 
                    })
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    currentToken = result.access_token;
                    localStorage.setItem('authToken', currentToken);
                    showResult('tokenResult', result, true);
                    updateTokenStatus();
                } else {
                    showResult('tokenResult', result, false);
                }
            } catch (error) {
                showResult('tokenResult', { error: error.message }, false);
            }
        }

        // Satƒ±≈ü faturalarƒ± listesi
        async function getSalesInvoices() {
            const offset = document.getElementById('invoiceOffset').value;
            const limit = document.getElementById('invoiceLimit').value;
            
            try {
                const response = await fetch(`/sales-invoice/invoices?offset=${offset}&limit=${limit}`, {
                    headers: getAuthHeaders()
                });
                
                const result = await response.json();
                showResult('invoicesResult', result, response.ok);
            } catch (error) {
                showResult('invoicesResult', { error: error.message }, false);
            }
        }

        // Arama ile faturalar
        async function getSalesInvoicesWithSearch() {
            const offset = document.getElementById('invoiceOffset').value;
            const limit = document.getElementById('invoiceLimit').value;
            
            try {
                const response = await fetch(`/sales-invoice/invoices?offset=${offset}&limit=${limit}&search=EFL`, {
                    headers: getAuthHeaders()
                });
                
                const result = await response.json();
                showResult('invoicesResult', result, response.ok);
            } catch (error) {
                showResult('invoicesResult', { error: error.message }, false);
            }
        }

        // Tek fatura okuma
        async function getSalesInvoice() {
            const id = document.getElementById('invoiceId').value;
            
            try {
                const response = await fetch(`/sales-invoice/invoices/${id}`, {
                    headers: getAuthHeaders()
                });
                
                const result = await response.json();
                showResult('singleInvoiceResult', result, response.ok);
            } catch (error) {
                showResult('singleInvoiceResult', { error: error.message }, false);
            }
        }

        // Detaylƒ± fatura okuma
        async function getSalesInvoiceFull() {
            const id = document.getElementById('invoiceId').value;
            
            try {
                const response = await fetch(`/sales-invoice/invoices/${id}/full`, {
                    headers: getAuthHeaders()
                });
                
                const result = await response.json();
                showResult('singleInvoiceResult', result, response.ok);
            } catch (error) {
                showResult('singleInvoiceResult', { error: error.message }, false);
            }
        }

        // M√º≈üteri listesi
        async function getCustomers() {
            const offset = document.getElementById('customerOffset').value;
            const limit = document.getElementById('customerLimit').value;
            
            try {
                const response = await fetch(`/sales-invoice/customers?offset=${offset}&limit=${limit}`, {
                    headers: getAuthHeaders()
                });
                
                const result = await response.json();
                showResult('customersResult', result, response.ok);
            } catch (error) {
                showResult('customersResult', { error: error.message }, false);
            }
        }

        // Tek m√º≈üteri
        async function getCustomer() {
            const id = document.getElementById('invoiceId').value; // Aynƒ± ID input'unu kullan
            
            try {
                const response = await fetch(`/sales-invoice/customers/${id}`, {
                    headers: getAuthHeaders()
                });
                
                const result = await response.json();
                showResult('customersResult', result, response.ok);
            } catch (error) {
                showResult('customersResult', { error: error.message }, false);
            }
        }

        // Satƒ±≈ü sipari≈üleri listesi
        async function getSalesOrders() {
            const offset = document.getElementById('orderOffset').value;
            const limit = document.getElementById('orderLimit').value;
            
            try {
                const response = await fetch(`/sales-invoice/orders?offset=${offset}&limit=${limit}`, {
                    headers: getAuthHeaders()
                });
                
                const result = await response.json();
                showResult('ordersResult', result, response.ok);
            } catch (error) {
                showResult('ordersResult', { error: error.message }, false);
            }
        }

        // Tek satƒ±≈ü sipari≈üi
        async function getSalesOrder() {
            const id = document.getElementById('invoiceId').value; // Aynƒ± ID input'unu kullan
            
            try {
                const response = await fetch(`/sales-invoice/orders/${id}`, {
                    headers: getAuthHeaders()
                });
                
                const result = await response.json();
                showResult('ordersResult', result, response.ok);
            } catch (error) {
                showResult('ordersResult', { error: error.message }, false);
            }
        }

        // Genel data endpoint
        async function getData() {
            const endpoint = document.getElementById('dataEndpoint').value;
            const offset = document.getElementById('dataOffset').value;
            const limit = document.getElementById('dataLimit').value;
            
            try {
                const response = await fetch(`/sales-invoice/data/${endpoint}?offset=${offset}&limit=${limit}`, {
                    headers: getAuthHeaders()
                });
                
                const result = await response.json();
                showResult('dataResult', result, response.ok);
            } catch (error) {
                showResult('dataResult', { error: error.message }, false);
            }
        }

        // ID ile data getir
        async function getDataById() {
            const endpoint = document.getElementById('dataEndpoint').value;
            const id = document.getElementById('dataId').value;
            
            if (!id) {
                showResult('dataResult', { error: 'ID gerekli' }, false);
                return;
            }
            
            try {
                const response = await fetch(`/sales-invoice/data/${endpoint}/${id}`, {
                    headers: getAuthHeaders()
                });
                
                const result = await response.json();
                showResult('dataResult', result, response.ok);
            } catch (error) {
                showResult('dataResult', { error: error.message }, false);
            }
        }

        // Detaylƒ± data getir
        async function getDataByIdFull() {
            const endpoint = document.getElementById('dataEndpoint').value;
            const id = document.getElementById('dataId').value;
            
            if (!id) {
                showResult('dataResult', { error: 'ID gerekli' }, false);
                return;
            }
            
            try {
                const response = await fetch(`/sales-invoice/data/${endpoint}/${id}/full`, {
                    headers: getAuthHeaders()
                });
                
                const result = await response.json();
                showResult('dataResult', result, response.ok);
            } catch (error) {
                showResult('dataResult', { error: error.message }, false);
            }
        }

        // Fatura olu≈üturma
        async function createSalesInvoice() {
            const dataText = document.getElementById('createInvoiceData').value;
            
            try {
                const data = JSON.parse(dataText);
                
                const response = await fetch('/sales-invoice/invoices', {
                    method: 'POST',
                    headers: {
                        ...getAuthHeaders(),
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                showResult('createInvoiceResult', result, response.ok);
            } catch (error) {
                showResult('createInvoiceResult', { error: error.message }, false);
            }
        }

        // Yardƒ±mcƒ± fonksiyonlar
        function getAuthHeaders() {
            return {
                'Authorization': `Bearer ${currentToken}`
            };
        }

        function showResult(elementId, data, isSuccess) {
            const element = document.getElementById(elementId);
            element.className = `result ${isSuccess ? 'success' : 'error'}`;
            element.innerHTML = `<pre>${JSON.stringify(data, null, 2)}</pre>`;
        }

        function updateTokenStatus() {
            const statusElement = document.getElementById('tokenStatus');
            if (currentToken) {
                statusElement.className = 'status success';
                statusElement.textContent = '‚úÖ Token mevcut';
            } else {
                statusElement.className = 'status error';
                statusElement.textContent = '‚ùå Token yok';
            }
        }

        function logout() {
            currentToken = null;
            localStorage.removeItem('authToken');
            updateTokenStatus();
        }

        // Sayfa y√ºklendiƒüinde token durumunu kontrol et
        document.addEventListener('DOMContentLoaded', function() {
            updateTokenStatus();
        });
    </script>
</body>
</html> 